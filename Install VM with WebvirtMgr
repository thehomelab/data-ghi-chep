#Install VM with WebvirtMgr

##1. Setup host
- Script 
```sh
yum install epel-release -y
yum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx
yum -y install gcc python-devel
pip install numpy


cd /var/www
git clone git://github.com/retspen/webvirtmgr.git
cd webvirtmgr
sudo pip install -r requirements.txt 
./manage.py syncdb


echo "yes" | ./manage.py collectstatic


cd ..
sudo mv webvirtmgr /var/www/
sudo chown -R nginx:nginx /var/www/webvirtmgr



cat << EOF > /etc/nginx/conf.d/webvirtmgr.conf
server {
    listen 80 default_server;

    server_name web;
    #access_log /var/log/nginx/webvirtmgr_access_log; 

    location /static/ {
        root /var/www/webvirtmgr/webvirtmgr; # or /srv instead of /var
        expires max;
    }

    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-for \$proxy_add_x_forwarded_for;
        proxy_set_header Host \$host:\$server_port;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_connect_timeout 600;
        proxy_read_timeout 600;
        proxy_send_timeout 600;
        client_max_body_size 1024M; # Set higher depending on your needs 
    }
}

EOF


cat << EOF > /etc/nginx/nginx.conf
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    log_format  main  '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                      '\$status \$body_bytes_sent "\$http_referer" '
                      '"\$http_user_agent" "\$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

}

EOF

/usr/sbin/setsebool httpd_can_network_connect true 
sudo  chkconfig supervisord on


cat << EOF > /etc/supervisord.d/webvirtmgr.ini
[program:webvirtmgr]
command=/usr/bin/python /var/www/webvirtmgr/manage.py run_gunicorn -c /var/www/webvirtmgr/conf/gunicorn.conf.py
directory=/var/www/webvirtmgr
autostart=true
autorestart=true
logfile=/var/log/supervisor/webvirtmgr.log
log_stderr=true
user=nginx

[program:webvirtmgr-console]
command=/usr/bin/python /var/www/webvirtmgr/console/webvirtmgr-console
directory=/var/www/webvirtmgr
autostart=true
autorestart=true
stdout_logfile=/var/log/supervisor/webvirtmgr-console.log
redirect_stderr=true
user=nginx
EOF


sudo systemctl restart nginx
restorecon -r /var/www/webvirtmgr
sudo service supervisord restart

```

##Install KVM host

-Script
```sh
yum install qemu-kvm qemu-img virt-manager libvirt libvirt-python libvirt-client virt-install virt-viewer bridge-utils

systemctl start libvirtd
systemctl enable libvirtd

```
##Create VM on web
- Login & Create Connect
https://imgur.com/fPy3Rog
- Create Storage
https://imgur.com/U5XHDe1
https://imgur.com/bR94rPo
https://imgur.com/o9jaK3f
https://imgur.com/8bA3pDp


- Create Network
https://imgur.com/6dRI1eT

- Create VM from Template
https://imgur.com/qGwNDYI
https://imgur.com/Pyu5Fan

- Done
https://imgur.com/mC1uXfs


####By Hoang Nhu Anh
